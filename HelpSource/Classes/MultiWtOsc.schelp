TITLE:: MultiWtOsc
summary:: A multi-wavetable oscillator with reduced aliasing
categories:: UGens>Buffer
related:: Classes/WavetablePrep

DESCRIPTION::
A pseudo-UGen that uses a wavetable file produced by link::Classes/WavetablePrep::. It attempts to control aliasing somewhat using a frequency-mapping technique. It also supports phase distortion and "unison"-style detuning.

NOTE:: 
This pseudo-UGen does not use SC wavetable oscillators, and the buffer data should not be in the same wavetable format used by link::Classes/Osc::! See link::Classes/WavetablePrep::.
::

NOTE:: At playback time, indexing resolution may be lost if the resulting size exceeds 24 bits of precision = 16777216 sample frames. A 2048-sample wavetable, with 256 positions and 8 frequency maps, comes to 4194304 samples, well within range. Most original wavetable files are likely to be fine. Exceptionally large ones may need to be reduced. ::

SUBSECTION:: Phase processing

As is normal for wavetable oscillators, MultiWtOsc begins with a linear ramp for the phase: link::Classes/Phasor:: ramps between 0.0 and 1.0.

code::hardSync:: is applied as a trigger input to Phasor: the phase will reset to 0 every time code::hardSync:: crosses from non-positive to positive. (If code::hardSync == 0::, then there are no such transitions and the Phasor will run normally, disabling sync.)

Then code::phaseMod:: is added to this. Note: When phase-modulating a SinOsc, the SinOsc expects phase in radians, 0.0 to 2pi. With this range, the spectral effect is the same between frequency modulation and phase modulation, for any modulation index: code::SinOsc.ar(0, Phasor.ar(0, freq * SampleDur.ir, 0, 2pi) + (phaseMod * modIndex)):: should sound the same as code::SinOsc.ar(freq * (1 + (phaseMod * modIndex)))::. Because MultiWtOsc's internal phase is 0.0 to 1.0, the effect of the modulator will be 2pi times stronger than in SinOsc. MultiWtOsc does not scale the modulator in any way, so, for a compatible interpretation of the modulation index, you should scale the modulator down by 2pi: code::phaseMod * index * (1/2pi):: (written this way to avoid a division operator).

The code::squeeze:: parameter applies phase distortion to this. code::squeeze > 0:: means that the part of the wavetable at code::wtOffset:: will be squeezed (and, halfway away from this will be stretched). code::squeeze < 0:: means the opposite. (Note that code::wtOffset:: is simply added after phase distortion -- so, it can be used for phase modulation also! There should be a difference in sound between modulating phase before phase distortion, vs after.)


CLASSMETHODS::

METHOD:: ar
Returns a single-channel wavetable-oscillator signal. Detuned oscillators are summed to mono.

ARGUMENT:: freq
Frequency in Hz.

ARGUMENT:: wtPos
Wavetable position. It is up to you to know how many wavetables were provided in the source.

ARGUMENT:: squeeze
A phase-distortion factor. 0 is no distortion. code::squeeze > 0:: compacts the waveform around the wtOffset point; code::squeeze < 0:: stretches around the same point.

ARGUMENT:: wtOffset
An offset, 0-1, added to the distorted phase. This determines the position in the wavetable that is squeezed or stretched. Rapid modulation is likely to affect pitch.

ARGUMENT:: bufnum
The buffer, containing a file produced by link::Classes/WavetablePrep::.

ARGUMENT:: wtSize
The number of samples for each waveform.

ARGUMENT:: numTables
The number of frequency maps.

ARGUMENT:: ratio
The ratio between frequency maps (2 = one octave).

ARGUMENT:: numOscs
The number of oscillators to produce. This must be a fixed integer (cannot be modulated).

ARGUMENT:: detune
The maximum frequency ratio for detuning. 1 = no detuning.

ARGUMENT:: interpolation
Interpolation method, passed internally to BufRd. 1 means no interpolation, 2 is linear, 4 is cubic.

ARGUMENT:: hardSync
Optional. An audio-rate signal serving as a hard sync source. The default, 0, disables sync. See examples below.

ARGUMENT:: phaseMod
Optional. An audio-rate signal to modulate the phase prior to phase distortion. To handle modulation index, you should multiply the modulator by code::modIndex * 2pi.reciprocal:: yourself.


METHOD:: arOscs
Similar to code::ar::, but it returns the detuned oscillators as an array, so that you can mix them according to any strategy you like (e.g. link::Classes/Splay::).

NOTE:: If numOscs = 1, then the result will be a UGen, not an array. ::


EXAMPLES::

code::
// change the path to a file you actually have!
w = WavetablePrep("~/.Rack/plugins-v1/Blamsoft-XFXWave/res/XTable Growler.wav".standardizePath);

w.read(action: { "done".postln });

w.tables.size  // 256 wavetable positions

w.write(thisProcess.nowExecutingPath.dirname +/+ "growler-wt.wav");

s.boot;

b = Buffer.read(s, thisProcess.nowExecutingPath.dirname +/+ "growler-wt.wav");

(
a = {
	var trig = Impulse.ar(10);
	(MultiWtOsc.ar(
		TExpRand.ar(50, 500, trig),
		LFDNoise3.kr(3).range(0, 254.999),
		0, 0,
		bufnum: b, numTables: 8, wtSize: 2048, ratio: 2,
		numOscs: 5, detune: 1.008
	) * 0.1).dup
}.play;
)

a.free;



// hacking a triangle --> sawtooth wavetable
(
f = SoundFile.openWrite("~/tri-saw.wav".standardizePath, "wav", "float", 1, 44100);

if(f.notNil) {
	var wt = Signal.newClear(2048);
	protect {
		50.do { |i|
			var frac = 0.5 - (i / 100);  // (0.5, 0.49 .. 0.01)
			var peakI = (2048 * frac).round.asInteger;
			var remain = 2047 - peakI;
			(0 .. peakI).do { |j|
				wt[j] = (j / peakI) * 2 - 1;
			};
			(peakI .. 2047).do { |j|
				wt[j] = ((j - peakI) / remain) * -2 + 1;
			};
			f.writeData(wt);
		};
	} { f.close };
};
)

// convert to MultiWtOsc format
w = WavetablePrep("~/tri-saw.wav".standardizePath, wtSize: 2048, numMaps: 8, ratio: 2, filter: \tenPctSlope).read;

w.write("~/tri-saw-wt.wav".standardizePath);

b = Buffer.read(s, "~/tri-saw-wt.wav".standardizePath);

// simple oscillator
(
a = {
	var sig = MultiWtOsc.ar(
		MouseX.kr(50, 800, 1),
		MouseY.kr(0, 48.999, 0),
		bufnum: b
	);
	(sig * 0.1).dup
}.play;
)

// hard sync
(
a = {
	// sync freq should be below oscillator freq
	var sync = LFTri.ar(50);
	var sig = MultiWtOsc.ar(
		MouseX.kr(50, 800, 1),
		MouseY.kr(0, 48.999, 0),
		bufnum: b,
		hardSync: sync
	);
	(sig * 0.1).dup
}.play;
)

// windowed sync
(
a = {
	var sync = LFTri.ar(50);
	var sig = MultiWtOsc.ar(
		MouseX.kr(50, 800, 1),
		MouseY.kr(0, 48.999, 0),
		bufnum: b,
		// try also with more oscillators
		// numOscs: 5, detune: 1.011,
		hardSync: sync
	);
	(sig * (sync * 5).clip(-1, 1) * 0.1).dup
}.play;
)
::
